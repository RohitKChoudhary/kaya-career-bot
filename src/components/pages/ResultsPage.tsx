import { Download, Mail, RotateCcw, AlertTriangle, CheckCircle, Target, Lightbulb } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { ScoreDisplay } from "@/components/features/ScoreDisplay";
import { AnalysisData, AnalysisResult } from "@/types";

interface ResultsPageProps {
  analysisData: AnalysisData;
  result: AnalysisResult;
  onAnalyzeAnother: () => void;
}

export function ResultsPage({ analysisData, result, onAnalyzeAnother }: ResultsPageProps) {
  const { toast } = useToast();

  const handleEmailResults = () => {
    toast({
      title: "Email Feature",
      description: "Email functionality would be implemented in production",
    });
  };

  const handleDownloadReport = () => {
    const report = `
KAYA AI RESUME ANALYSIS REPORT
====================================
Analysis Date: ${new Date().toLocaleString()}
Position: ${analysisData.jobRole} at ${analysisData.company}
Resume File: ${analysisData.filename}

OVERALL SCORE: ${result.displayScore}/10 (${result.finalScore}/100)

DETAILED ANALYSIS:
${result.evaluations.map(evaluation => `${evaluation.model}: ${evaluation.evaluation.score}/100`).join('\n')}

IDEAL RESUME BENCHMARK:
${result.idealResume}

Generated by Kaya AI - Career Navigator
    `;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `kaya_ai_analysis_${analysisData.company}_${analysisData.jobRole}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Your analysis report has been downloaded successfully",
    });
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-success";
    if (score >= 60) return "text-warning";
    return "text-destructive";
  };

  const getScoreBadgeVariant = (score: number) => {
    if (score >= 80) return "default";
    if (score >= 60) return "secondary";
    return "destructive";
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-primary/5 py-8">
      <div className="container mx-auto max-w-6xl px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-hero rounded-2xl mb-6">
            <Target className="w-8 h-8 text-primary-foreground" />
          </div>
          <h1 className="text-4xl font-bold text-foreground mb-4">Analysis Results</h1>
          <p className="text-xl text-muted-foreground">
            Resume analyzed for{" "}
            <span className="font-semibold text-primary">{analysisData.jobRole}</span> at{" "}
            <span className="font-semibold text-primary">{analysisData.company}</span>
          </p>
        </div>

        {/* Score Display */}
        <div className="mb-8">
          <ScoreDisplay
            score={result.displayScore}
            maxScore={10}
            title="Overall Resume Score"
            subtitle={`Based on ${result.evaluations.length} AI model analysis`}
          />
        </div>

        {/* Main Content */}
        <Tabs defaultValue="analysis" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-gradient-card">
            <TabsTrigger value="analysis">ðŸ“Š Analysis</TabsTrigger>
            <TabsTrigger value="ideal">ðŸ“„ Ideal Resume</TabsTrigger>
            <TabsTrigger value="gaps">ðŸŽ¯ Gap Analysis</TabsTrigger>
            <TabsTrigger value="recommendations">ðŸ’¡ Recommendations</TabsTrigger>
          </TabsList>

          <TabsContent value="analysis" className="space-y-6">
            <Card className="bg-gradient-card border border-border/50 shadow-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5" />
                  Detailed Analysis Breakdown
                </CardTitle>
                <CardDescription>
                  Individual AI model assessments of your resume
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {result.evaluations.map((evaluation, index) => (
                  <div key={index} className="border border-border/50 rounded-lg p-6 bg-background/50">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-foreground">
                        {evaluation.model} Analysis
                      </h3>
                      <Badge variant={getScoreBadgeVariant(evaluation.evaluation.score)}>
                        {evaluation.evaluation.score}/100
                      </Badge>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <h4 className="font-medium text-foreground mb-2">Score Breakdown</h4>
                        <div className={`text-2xl font-bold ${getScoreColor(evaluation.evaluation.score)} mb-2`}>
                          {evaluation.evaluation.score}%
                        </div>
                        <p className="text-sm text-muted-foreground">
                          {evaluation.evaluation.score >= 80 ? "Excellent match" : 
                           evaluation.evaluation.score >= 60 ? "Good foundation" : "Needs improvement"}
                        </p>
                      </div>
                      
                      <div>
                        <h4 className="font-medium text-foreground mb-2">Key Insights</h4>
                        <div className="text-sm text-muted-foreground whitespace-pre-line">
                          {evaluation.evaluation.gaps.split('\n').slice(0, 3).join('\n')}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="ideal" className="space-y-6">
            <Card className="bg-gradient-card border border-border/50 shadow-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="w-5 h-5" />
                  AI-Generated Ideal Resume
                </CardTitle>
                <CardDescription>
                  Optimized resume benchmark for {analysisData.jobRole} at {analysisData.company}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="bg-success/5 border border-success/20 rounded-lg p-6">
                  <pre className="whitespace-pre-wrap text-sm font-mono leading-relaxed text-foreground">
                    {result.idealResume}
                  </pre>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="gaps" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {result.evaluations.map((evaluation, index) => (
                <Card key={index} className="bg-gradient-card border border-border/50 shadow-card">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <AlertTriangle className="w-5 h-5" />
                      {evaluation.model} Gap Analysis
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-medium text-foreground mb-3">Areas for Improvement</h4>
                      <div className="bg-warning/10 border border-warning/20 rounded-lg p-4">
                        <div className="whitespace-pre-line text-sm text-foreground leading-relaxed">
                          {evaluation.evaluation.gaps}
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-medium text-foreground mb-3">Missing Keywords</h4>
                      <div className="bg-primary/10 border border-primary/20 rounded-lg p-4">
                        <div className="whitespace-pre-line text-sm text-foreground leading-relaxed">
                          {evaluation.evaluation.keywords}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="recommendations" className="space-y-6">
            {result.evaluations.map((evaluation, index) => (
              <Card key={index} className="bg-gradient-card border border-border/50 shadow-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Lightbulb className="w-5 h-5" />
                    {evaluation.model} Recommendations
                  </CardTitle>
                  <CardDescription>
                    Actionable steps to improve your resume score
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="bg-accent/10 border border-accent/20 rounded-lg p-6">
                    <div className="whitespace-pre-line text-sm text-foreground leading-relaxed">
                      {evaluation.evaluation.recommendations}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </TabsContent>
        </Tabs>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 mt-8 justify-center">
          <Button variant="outline" onClick={onAnalyzeAnother} size="lg">
            <RotateCcw className="w-4 h-4 mr-2" />
            Analyze Another Resume
          </Button>
          
          <Button variant="secondary" onClick={handleEmailResults} size="lg">
            <Mail className="w-4 h-4 mr-2" />
            Email Results
          </Button>
          
          <Button variant="hero" onClick={handleDownloadReport} size="lg">
            <Download className="w-4 h-4 mr-2" />
            Download Report
          </Button>
        </div>
      </div>
    </div>
  );
}